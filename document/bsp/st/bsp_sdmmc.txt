// .h file
#include "../../arnics-os/drivers/bsp/bsp_def.h"
extern int bsp_sdmmc_init(sdmmc_t *dev);
extern void bsp_sdmmc_close(sdmmc_t *dev);
extern int bsp_sdmmc_write(sdmmc_t *dev,uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout);
extern int bsp_sdmmc_read(sdmmc_t *dev, uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout);
extern int bsp_sdmmc_erase(sdmmc_t *dev,uint32_t StartAddr, uint32_t EndAddr);
extern int bsp_sdmmc_get_card_state(sdmmc_t *dev);
extern void bsp_sdmmc_get_card_info(sdmmc_t *dev,sdCardInfo_t *CardInfo);
/* callback-----------------------------------------*/
extern void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd);
extern void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd);
extern void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd);
extern void BSP_SD_AbortCallback(void);
extern void BSP_SD_WriteCpltCallback(void);
extern void BSP_SD_ReadCpltCallback(void);
extern int bsp_is_detected(void);

// .c file
int bsp_sdmmc_init(sdmmc_t *dev)
{
  /* Configure SD Bus width (4 bits mode selected) */
  if (HAL_OK == HAL_SD_Init(&dev->hsd))
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&dev->hsd, SDMMC_BUS_WIDE_4B) != HAL_OK)
    {
      return -1;
    }
    return 0;
  }
  return  -1;

}
void bsp_sdmmc_close(sdmmc_t *dev)
{
  HAL_SD_DeInit(&dev->hsd);
}

/**
  * @brief  Writes block(s) to a specified address in an SD card, in polling mode.
  * @param  pData: Pointer to the buffer that will contain the data to transmit
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
int bsp_sdmmc_write(sdmmc_t *dev,uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
  if (HAL_SD_WriteBlocks(&dev->hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
  {
    return -1;
  }

  return 0;

}

/**
  * @brief  Reads block(s) from a specified address in an SD card, in polling mode.
  * @param  pData: Pointer to the buffer that will contain the data to transmit
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
int bsp_sdmmc_read(sdmmc_t *dev, uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{

  if (HAL_SD_ReadBlocks(&dev->hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
  {
    return -1;
  }
  return 0;
}

/* USER CODE BEGIN BeforeEraseSection */
/* can be used to modify previous code / undefine following code / add code */
/* USER CODE END BeforeEraseSection */
/**
  * @brief  Erases the specified memory area of the given SD card.
  * @param  StartAddr: Start byte address
  * @param  EndAddr: End byte address
  * @retval SD status
  */
int bsp_sdmmc_erase(sdmmc_t *dev,uint32_t StartAddr, uint32_t EndAddr)
{
  if (HAL_SD_Erase(&dev->hsd, StartAddr, EndAddr) != HAL_OK)
  {
    return -1;
  }

  return 0;
}

/* USER CODE BEGIN BeforeGetCardStateSection */
/* can be used to modify previous code / undefine following code / add code */
/* USER CODE END BeforeGetCardStateSection */

/**
  * @brief  Gets the current SD card data status.
  * @param  None
  * @retval Data transfer state.
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK    0: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY -1: Data transfer is acting
  */
int bsp_sdmmc_get_card_state(sdmmc_t *dev)
{
  return ((HAL_SD_CARD_TRANSFER == HAL_SD_GetCardState(&dev->hsd)) ? 0 : -1);
}

/**
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
void bsp_sdmmc_get_card_info(sdmmc_t *dev,sdCardInfo_t *CardInfo)
{
  
  HAL_SD_CardInfoTypeDef cardInfo;
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&dev->hsd, &cardInfo);
  memcpy(CardInfo, &cardInfo, sizeof(sdCardInfo_t));
}

/* USER CODE BEGIN BeforeCallBacksSection */
/* can be used to modify previous code / undefine following code / add code */
/* USER CODE END BeforeCallBacksSection */
/**
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
  BSP_SD_AbortCallback();
}

/**
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
  BSP_SD_WriteCpltCallback();
}

/**
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
  BSP_SD_ReadCpltCallback();
}

/* USER CODE BEGIN CallBacksSection_C */
/**
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
void BSP_SD_AbortCallback(void)
{

}

/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
void BSP_SD_WriteCpltCallback(void)
{

}

/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
void BSP_SD_ReadCpltCallback(void)
{

}

/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not 
 * @return 0 detected, -1  not detected
 */
int bsp_is_detected(void)
{
  return 0;
}

