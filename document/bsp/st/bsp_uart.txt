// .h file
extern void bsp_usart_init(uart_t *dev);
extern void bsp_usart_close(uart_t *dev);
extern void bsp_uart_IT_enable(uart_t *dev);
extern void bsp_usart_write(uart_t *dev, void *buf, size_t count);
extern void bsp_usart_read(uart_t *dev, void *buf, size_t count);
extern void bsp_uart_irq(uart_t *dev);
extern void bsp_uart_irq_ring(uart_t *dev);

// .c file
void bsp_usart_init(uart_t *dev)
{
  switch(dev->function)
  {
    case UART_DEBUG:
      dev->huart.Instance = USART1;
      break;
  }

  dev->huart.Init.BaudRate = dev->baudrate;
  dev->huart.Init.WordLength = dev->data_bits;
  dev->huart.Init.StopBits = dev->stop_bits;
  dev->huart.Init.Parity = dev->parity;
  dev->huart.Init.Mode = UART_MODE_TX_RX;
  dev->huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  dev->huart.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&dev->huart) != HAL_OK)
  {
    Error_Handler();
  }
}
void bsp_usart_close(uart_t *dev)
{
  HAL_UART_MspDeInit(&dev->huart);
}
void bsp_uart_IT_enable(uart_t *dev)
{
  __HAL_UART_ENABLE_IT(&dev->huart, UART_IT_TXE);
}

void bsp_usart_write(uart_t *dev, void *buf, size_t count)
{
  HAL_UART_Transmit(&dev->huart, (uint8_t *)buf, count, 10000);  // 10s 超时时间
}
void bsp_usart_read(uart_t *dev, void *buf, size_t count)
{
  HAL_UART_Receive(&dev->huart, (uint8_t *)buf, count, 10000);  // 10s 超时时间
}

void bsp_uart_irq(uart_t *dev)
{
  HAL_UART_IRQHandler(&dev->huart);
}


void bsp_uart_irq_ring(uart_t *dev)
{
  unsigned char data;

  if (__HAL_UART_GET_FLAG(&dev->huart, UART_FLAG_RXNE)) // 接收正确
  {
    HAL_UART_Receive(&dev->huart, &data, 1, 0);
    ring_buf_put(dev->ring_rx, &data, 1);
  }

  if (__HAL_UART_GET_FLAG(&dev->huart, UART_FLAG_TXE)) // 发送缓冲区已空
  {
    if (ring_buf_get(dev->ring_tx, &data, 1))
    {
      HAL_UART_Transmit(&dev->huart, &data, 1, 0);
    }
    else
    {
      __HAL_UART_DISABLE_IT(&dev->huart, UART_IT_TXE);
    }
  }

  if (__HAL_UART_GET_FLAG(&dev->huart, UART_FLAG_IDLE))
  {
    __HAL_UART_CLEAR_IDLEFLAG(&dev->huart); // 清IDLE标志
  }

  /*异常处理 ----------------------------------- ----------------------------*/
  if (__HAL_UART_GET_FLAG(&dev->huart, UART_FLAG_ORE)) // 过载错误
  {
    HAL_UART_Receive(&dev->huart, &data, 1, 0);
    __HAL_UART_CLEAR_OREFLAG(&dev->huart);
  }
}