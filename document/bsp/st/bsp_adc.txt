// .h
#ifndef __ADC_H__
#define __ADC_H__

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "../../arnics-os/drivers/bsp/bsp_def.h"
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */



/* USER CODE BEGIN Private defines */

/* USER CODE END Private defines */

void MX_ADC1_Init(void);
extern void bsp_adc_init(adc_t *adcx);
extern void bsp_adc_close(adc_t *adcx);
extern int bsp_adc_read(adc_t *adcx,uint16_t *buf, size_t count);
/* USER CODE BEGIN Prototypes */

/* USER CODE END Prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __ADC_H__ */

//.C
void bsp_adc_init(adc_t *adcx)
{
  if (HAL_ADC_Init(&adcx->hadc) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_ADC_ConfigChannel(&adcx->hadc, &adcx->sConfig) != HAL_OK)
  {
    Error_Handler();
  }
}
void bsp_adc_close(adc_t *adcx)
{
  if (HAL_ADC_DeInit(&adcx->hadc) != HAL_OK)
  {
    Error_Handler();
  }
}
int bsp_adc_read(adc_t *adcx, uint16_t *buf, size_t count)
{
    if (count == 0)
    {
        return 0; // 如果没有要读取的数据，直接返回
    }
    // 启动自动校准
    if (HAL_ADCEx_Calibration_Start(&adcx->hadc) != HAL_OK)
    {
        Error_Handler();
        return -1; // 校准失败
    }


    // 启动单次转换
    if (HAL_ADC_Start(&adcx->hadc) != HAL_OK)
    {
        Error_Handler();
        return -1; // 启动转换失败
    }

    // 循环进行多次采样
    for (size_t i = 0; i < count; i++)
    {
        // 等待转换完成
        if (HAL_ADC_PollForConversion(&adcx->hadc, HAL_MAX_DELAY) != HAL_OK)
        {
            Error_Handler();
            HAL_ADC_Stop(&adcx->hadc); // 停止ADC转换
            return -1; // 转换超时或失败
        }

        // 读取转换结果
        uint16_t adc_value = HAL_ADC_GetValue(&adcx->hadc);
        // 将ADC值转换为电压值
        float voltage = (float)adc_value / 4095.0 * 3.3;
        
        buf[i] = (uint16_t)(voltage * 1000); // 以毫伏为单位存储



    }

    // 停止ADC转换
    if (HAL_ADC_Stop(&adcx->hadc) != HAL_OK)
    {
        Error_Handler();
        return -1; // 停止转换失败
    }

    return count; // 返回读取的样本数
}

