

// .h file
#include "../../arnics-os/drivers/bsp/bsp_def.h"
extern void bsp_gpio_init(io_t *io);
extern void bsp_gpio_close(io_t *io);
extern void bsp_gpio_set(io_t *io,unsigned int statue);
extern GPIO_PinState bsp_gpio_get(io_t *io);
extern void bsp_gpio_toggle(io_t *io);
extern void bsp_gpio_irq(io_t *io);

// .c file
void bsp_gpio_init(io_t *io)
{
  if (io->GPIOx == GPIOA) 
  {
      __HAL_RCC_GPIOA_CLK_ENABLE();
  } 
  else if (io->GPIOx == GPIOB) 
  {
      __HAL_RCC_GPIOB_CLK_ENABLE();
  } 
  else if (io->GPIOx == GPIOC) 
  {
      __HAL_RCC_GPIOC_CLK_ENABLE();
  } 
  else if (io->GPIOx == GPIOD) 
  {
      __HAL_RCC_GPIOD_CLK_ENABLE();
  } 
  else 
  {
      // 处理未知的 GPIO 端口
  }

  HAL_GPIO_Init(io->GPIOx, &io->GPIO_InitStruct);

  HAL_GPIO_WritePin(io->GPIOx, io->GPIO_InitStruct.Pin, io->PinState);

}
void bsp_gpio_close(io_t *io)
{
  HAL_GPIO_DeInit(io->GPIOx, io->GPIO_InitStruct.Pin);

}
void bsp_gpio_set(io_t *io,unsigned int statue)
{
  HAL_GPIO_WritePin(io->GPIOx, io->GPIO_InitStruct.Pin, (GPIO_PinState)statue);
}
GPIO_PinState bsp_gpio_get(io_t *io)
{
  return HAL_GPIO_ReadPin(io->GPIOx, io->GPIO_InitStruct.Pin);
}

void bsp_gpio_toggle(io_t *io)
{
  HAL_GPIO_TogglePin(io->GPIOx, io->GPIO_InitStruct.Pin);
}
void bsp_gpio_irq(io_t *io)
{
  HAL_GPIO_EXTI_IRQHandler(io->GPIO_InitStruct.Pin);
}
